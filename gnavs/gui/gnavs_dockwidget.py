# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FindLocationDockWidget
                                 A QGIS plugin
 Navigate to location
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-30
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Torsten Wiebke, Gerrit Balindt
        email                : support@gruenecho.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal

from qgis.core import QgsMessageLog

from qgis.PyQt.QtWidgets import QDialog, QScroller

from .setup.setup import Setup
from .setup.settings import Settings
from ..utils.utils import Utils
from .recording.toggle_buttons import ToggleButtons

FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'gnavs_dockwidget_base.ui'))

class GnavsDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, interface, parent=None):
        """Constructor."""

        QtWidgets.QDockWidget.__init__(self, interface.mainWindow())
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


        scroll = QScroller.scroller(self.lfbScrollArea.viewport())
        scroll.grabGesture(self.lfbScrollArea.viewport(), QScroller.LeftMouseButtonGesture)

        self.setupDevice = Setup(interface, 10)
        self.setupDevice.measurementCountChanged.connect(self.lfbMeasurementCountChanged)
        self.geMainLayout.addWidget(self.setupDevice)

        self.Settings = Settings(interface, 10)
        self.geMainLayout.addWidget(self.Settings)

        #self.lfbHomeBtn.setIcon(self.style().standardIcon(QtWidgets.QStyle.SP_ArrowLeft))
        #self.lfbHomeBtn.clicked.connect(self.toHome)

        #self.lfbSettingsBtn.setIcon(self.style().standardIcon(QtWidgets.QStyle.SP_MessageBoxInformation))
        #self.lfbSettingsBtn.clicked.connect(self.toSettings)

        toggleButtons = ToggleButtons(interface)
        toggleButtons.change.connect(self.toggleButtonsChanged)
        self.lfbMenuBarLayout.insertWidget(0, toggleButtons)

        

        self.lfbAddToMapBtn.clicked.connect(self.addToMap)

        self.toHome()
        self.toggleButtonsChanged('navigation')

    def addToMap(self):
        self.setupDevice.addDataToMap()
        self.lfbAddToMapBtn.setEnabled(False)

    def lfbMeasurementCountChanged(self, count):
        QgsMessageLog.logMessage('GnavsDockWidget: lfbMeasurementCountChanged: ' + str(count), 'LFB')
        if count > 0:
            self.lfbAddToMapBtn.setEnabled(True)
        else:
            self.lfbAddToMapBtn.setEnabled(False)

    def toggleButtonsChanged(self, state):
        if state == 'settings':
            self.toSettings()
        else:
            self.toHome()

        self.setupDevice.toggleButtonsChanged(state)

        if state == 'point':
            self.lfbAddToMapWidget.show()
        else:
            self.lfbAddToMapWidget.hide()

    def toHome(self):
        #self.lfbHomeBtn.hide()
        #self.lfbSettingsBtn.show()

        self.setupDevice.show()
        self.Settings.hide()
        #self.setupDevice.stateChanged(state)

    
    def toSettings(self):
        #self.lfbHomeBtn.show()
        #self.lfbSettingsBtn.hide()

        self.setupDevice.hide()
        self.Settings.show()

    def closeEvent(self, event):

        # remove private Layers
        Utils.removeLayer(['lfb-tmp-position', 'lfb-tmp-distance'])
        self.setupDevice.stopTracking()
        # del self.setupDevice

        QgsMessageLog.logMessage('GnavsDockWidget: closeEvent', 'LFB')
       
        self.closingPlugin.emit()
        event.accept()