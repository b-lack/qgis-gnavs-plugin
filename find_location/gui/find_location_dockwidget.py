# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FindLocationDockWidget
                                 A QGIS plugin
 Navigate to location
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-30
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Torsten Wiebke, Gerrit Balindt
        email                : support@gruenecho.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal

from qgis.core import QgsMessageLog

from qgis.PyQt.QtWidgets import QDialog, QScroller

from .setup.setup import Setup
from ..utils.utils import Utils

FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'find_location_dockwidget_base.ui'))

class FindLocationDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, interface, parent=None):
        """Constructor."""
        #super(FindLocationDockWidget, self).__init__(parent)
        QtWidgets.QDockWidget.__init__(self, interface.mainWindow())
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


        scroll = QScroller.scroller(self.scrollArea.viewport())
        scroll.grabGesture(self.scrollArea.viewport(), QScroller.LeftMouseButtonGesture)

        setupDevice = Setup(interface, 10)
        setupDevice.inputChanged.connect(self.onInputChanged)
        self.geMainLayout.addWidget(setupDevice)

    def onInputChanged(self, measurements):
        for measurement in measurements:
            QgsMessageLog.logMessage(str(measurement.satellitesUsed), 'LFB')
            QgsMessageLog.logMessage(str(measurement.hdop), 'LFB')
            QgsMessageLog.logMessage(str(measurement.pdop), 'LFB')
            QgsMessageLog.logMessage(str(measurement.vdop), 'LFB')

    def closeEvent(self, event):
        # when close dialog

        # hide Layer
        Utils.removeLayer(['lfb-tmp-position', 'lfb-tmp-distance'])
       
        self.closingPlugin.emit()
        event.accept()
